package com.youmai.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.db.bean.ChargerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHARGER_BEAN".
*/
public class ChargerBeanDao extends AbstractDao<ChargerBean, Long> {

    public static final String TABLENAME = "CHARGER_BEAN";

    /**
     * Properties of entity ChargerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Reserved1 = new Property(1, short.class, "reserved1", false, "RESERVED1");
        public final static Property Reserved2 = new Property(2, short.class, "reserved2", false, "RESERVED2");
        public final static Property ChargerCode = new Property(3, byte[].class, "chargerCode", false, "CHARGER_CODE");
        public final static Property GunType = new Property(4, byte.class, "gunType", false, "GUN_TYPE");
        public final static Property GunPort = new Property(5, byte.class, "gunPort", false, "GUN_PORT");
        public final static Property CardCode = new Property(6, byte[].class, "cardCode", false, "CARD_CODE");
        public final static Property BeginTime = new Property(7, long.class, "beginTime", false, "BEGIN_TIME");
        public final static Property StopTime = new Property(8, long.class, "stopTime", false, "STOP_TIME");
        public final static Property ChargeTime = new Property(9, int.class, "chargeTime", false, "CHARGE_TIME");
        public final static Property StartSOC = new Property(10, byte.class, "startSOC", false, "START_SOC");
        public final static Property StopSOC = new Property(11, byte.class, "stopSOC", false, "STOP_SOC");
        public final static Property OverReason = new Property(12, int.class, "overReason", false, "OVER_REASON");
        public final static Property Power = new Property(13, int.class, "power", false, "POWER");
        public final static Property StartReading = new Property(14, int.class, "startReading", false, "START_READING");
        public final static Property StopReading = new Property(15, int.class, "stopReading", false, "STOP_READING");
        public final static Property Amount = new Property(16, int.class, "amount", false, "AMOUNT");
        public final static Property Reserved17 = new Property(17, int.class, "reserved17", false, "RESERVED17");
        public final static Property CardOverage = new Property(18, int.class, "cardOverage", false, "CARD_OVERAGE");
        public final static Property CardIndex = new Property(19, int.class, "cardIndex", false, "CARD_INDEX");
        public final static Property Record = new Property(20, int.class, "record", false, "RECORD");
        public final static Property Reserved21 = new Property(21, byte.class, "reserved21", false, "RESERVED21");
        public final static Property Strategy = new Property(22, byte.class, "strategy", false, "STRATEGY");
        public final static Property ChargeParam = new Property(23, int.class, "chargeParam", false, "CHARGE_PARAM");
        public final static Property VinCode = new Property(24, byte[].class, "vinCode", false, "VIN_CODE");
        public final static Property NumberPlate = new Property(25, long.class, "numberPlate", false, "NUMBER_PLATE");
        public final static Property Time1 = new Property(26, short.class, "time1", false, "TIME1");
        public final static Property Time2 = new Property(27, short.class, "time2", false, "TIME2");
        public final static Property Time3 = new Property(28, short.class, "time3", false, "TIME3");
        public final static Property Time4 = new Property(29, short.class, "time4", false, "TIME4");
        public final static Property Time5 = new Property(30, short.class, "time5", false, "TIME5");
        public final static Property Time6 = new Property(31, short.class, "time6", false, "TIME6");
        public final static Property Time7 = new Property(32, short.class, "time7", false, "TIME7");
        public final static Property Time8 = new Property(33, short.class, "time8", false, "TIME8");
        public final static Property Time9 = new Property(34, short.class, "time9", false, "TIME9");
        public final static Property Time10 = new Property(35, short.class, "time10", false, "TIME10");
        public final static Property Time11 = new Property(36, short.class, "time11", false, "TIME11");
        public final static Property Time12 = new Property(37, short.class, "time12", false, "TIME12");
        public final static Property Time13 = new Property(38, short.class, "time13", false, "TIME13");
        public final static Property Time14 = new Property(39, short.class, "time14", false, "TIME14");
        public final static Property Time15 = new Property(40, short.class, "time15", false, "TIME15");
        public final static Property Time16 = new Property(41, short.class, "time16", false, "TIME16");
        public final static Property Time17 = new Property(42, short.class, "time17", false, "TIME17");
        public final static Property Time18 = new Property(43, short.class, "time18", false, "TIME18");
        public final static Property Time19 = new Property(44, short.class, "time19", false, "TIME19");
        public final static Property Time20 = new Property(45, short.class, "time20", false, "TIME20");
        public final static Property Time21 = new Property(46, short.class, "time21", false, "TIME21");
        public final static Property Time22 = new Property(47, short.class, "time22", false, "TIME22");
        public final static Property Time23 = new Property(48, short.class, "time23", false, "TIME23");
        public final static Property Time24 = new Property(49, short.class, "time24", false, "TIME24");
        public final static Property Time25 = new Property(50, short.class, "time25", false, "TIME25");
        public final static Property Time26 = new Property(51, short.class, "time26", false, "TIME26");
        public final static Property Time27 = new Property(52, short.class, "time27", false, "TIME27");
        public final static Property Time28 = new Property(53, short.class, "time28", false, "TIME28");
        public final static Property Time29 = new Property(54, short.class, "time29", false, "TIME29");
        public final static Property Time30 = new Property(55, short.class, "time30", false, "TIME30");
        public final static Property Time31 = new Property(56, short.class, "time31", false, "TIME31");
        public final static Property Time32 = new Property(57, short.class, "time32", false, "TIME32");
        public final static Property Time33 = new Property(58, short.class, "time33", false, "TIME33");
        public final static Property Time34 = new Property(59, short.class, "time34", false, "TIME34");
        public final static Property Time35 = new Property(60, short.class, "time35", false, "TIME35");
        public final static Property Time36 = new Property(61, short.class, "time36", false, "TIME36");
        public final static Property Time37 = new Property(62, short.class, "time37", false, "TIME37");
        public final static Property Time38 = new Property(63, short.class, "time38", false, "TIME38");
        public final static Property Time39 = new Property(64, short.class, "time39", false, "TIME39");
        public final static Property Time40 = new Property(65, short.class, "time40", false, "TIME40");
        public final static Property Time41 = new Property(66, short.class, "time41", false, "TIME41");
        public final static Property Time42 = new Property(67, short.class, "time42", false, "TIME42");
        public final static Property Time43 = new Property(68, short.class, "time43", false, "TIME43");
        public final static Property Time44 = new Property(69, short.class, "time44", false, "TIME44");
        public final static Property Time45 = new Property(70, short.class, "time45", false, "TIME45");
        public final static Property Time46 = new Property(71, short.class, "time46", false, "TIME46");
        public final static Property Time47 = new Property(72, short.class, "time47", false, "TIME47");
        public final static Property Time48 = new Property(73, short.class, "time48", false, "TIME48");
        public final static Property StartMethod = new Property(74, byte.class, "startMethod", false, "START_METHOD");
        public final static Property OrderCode = new Property(75, byte[].class, "orderCode", false, "ORDER_CODE");
    }


    public ChargerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChargerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHARGER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RESERVED1\" INTEGER NOT NULL ," + // 1: reserved1
                "\"RESERVED2\" INTEGER NOT NULL ," + // 2: reserved2
                "\"CHARGER_CODE\" BLOB," + // 3: chargerCode
                "\"GUN_TYPE\" INTEGER NOT NULL ," + // 4: gunType
                "\"GUN_PORT\" INTEGER NOT NULL ," + // 5: gunPort
                "\"CARD_CODE\" BLOB," + // 6: cardCode
                "\"BEGIN_TIME\" INTEGER NOT NULL ," + // 7: beginTime
                "\"STOP_TIME\" INTEGER NOT NULL ," + // 8: stopTime
                "\"CHARGE_TIME\" INTEGER NOT NULL ," + // 9: chargeTime
                "\"START_SOC\" INTEGER NOT NULL ," + // 10: startSOC
                "\"STOP_SOC\" INTEGER NOT NULL ," + // 11: stopSOC
                "\"OVER_REASON\" INTEGER NOT NULL ," + // 12: overReason
                "\"POWER\" INTEGER NOT NULL ," + // 13: power
                "\"START_READING\" INTEGER NOT NULL ," + // 14: startReading
                "\"STOP_READING\" INTEGER NOT NULL ," + // 15: stopReading
                "\"AMOUNT\" INTEGER NOT NULL ," + // 16: amount
                "\"RESERVED17\" INTEGER NOT NULL ," + // 17: reserved17
                "\"CARD_OVERAGE\" INTEGER NOT NULL ," + // 18: cardOverage
                "\"CARD_INDEX\" INTEGER NOT NULL ," + // 19: cardIndex
                "\"RECORD\" INTEGER NOT NULL ," + // 20: record
                "\"RESERVED21\" INTEGER NOT NULL ," + // 21: reserved21
                "\"STRATEGY\" INTEGER NOT NULL ," + // 22: strategy
                "\"CHARGE_PARAM\" INTEGER NOT NULL ," + // 23: chargeParam
                "\"VIN_CODE\" BLOB," + // 24: vinCode
                "\"NUMBER_PLATE\" INTEGER NOT NULL ," + // 25: numberPlate
                "\"TIME1\" INTEGER NOT NULL ," + // 26: time1
                "\"TIME2\" INTEGER NOT NULL ," + // 27: time2
                "\"TIME3\" INTEGER NOT NULL ," + // 28: time3
                "\"TIME4\" INTEGER NOT NULL ," + // 29: time4
                "\"TIME5\" INTEGER NOT NULL ," + // 30: time5
                "\"TIME6\" INTEGER NOT NULL ," + // 31: time6
                "\"TIME7\" INTEGER NOT NULL ," + // 32: time7
                "\"TIME8\" INTEGER NOT NULL ," + // 33: time8
                "\"TIME9\" INTEGER NOT NULL ," + // 34: time9
                "\"TIME10\" INTEGER NOT NULL ," + // 35: time10
                "\"TIME11\" INTEGER NOT NULL ," + // 36: time11
                "\"TIME12\" INTEGER NOT NULL ," + // 37: time12
                "\"TIME13\" INTEGER NOT NULL ," + // 38: time13
                "\"TIME14\" INTEGER NOT NULL ," + // 39: time14
                "\"TIME15\" INTEGER NOT NULL ," + // 40: time15
                "\"TIME16\" INTEGER NOT NULL ," + // 41: time16
                "\"TIME17\" INTEGER NOT NULL ," + // 42: time17
                "\"TIME18\" INTEGER NOT NULL ," + // 43: time18
                "\"TIME19\" INTEGER NOT NULL ," + // 44: time19
                "\"TIME20\" INTEGER NOT NULL ," + // 45: time20
                "\"TIME21\" INTEGER NOT NULL ," + // 46: time21
                "\"TIME22\" INTEGER NOT NULL ," + // 47: time22
                "\"TIME23\" INTEGER NOT NULL ," + // 48: time23
                "\"TIME24\" INTEGER NOT NULL ," + // 49: time24
                "\"TIME25\" INTEGER NOT NULL ," + // 50: time25
                "\"TIME26\" INTEGER NOT NULL ," + // 51: time26
                "\"TIME27\" INTEGER NOT NULL ," + // 52: time27
                "\"TIME28\" INTEGER NOT NULL ," + // 53: time28
                "\"TIME29\" INTEGER NOT NULL ," + // 54: time29
                "\"TIME30\" INTEGER NOT NULL ," + // 55: time30
                "\"TIME31\" INTEGER NOT NULL ," + // 56: time31
                "\"TIME32\" INTEGER NOT NULL ," + // 57: time32
                "\"TIME33\" INTEGER NOT NULL ," + // 58: time33
                "\"TIME34\" INTEGER NOT NULL ," + // 59: time34
                "\"TIME35\" INTEGER NOT NULL ," + // 60: time35
                "\"TIME36\" INTEGER NOT NULL ," + // 61: time36
                "\"TIME37\" INTEGER NOT NULL ," + // 62: time37
                "\"TIME38\" INTEGER NOT NULL ," + // 63: time38
                "\"TIME39\" INTEGER NOT NULL ," + // 64: time39
                "\"TIME40\" INTEGER NOT NULL ," + // 65: time40
                "\"TIME41\" INTEGER NOT NULL ," + // 66: time41
                "\"TIME42\" INTEGER NOT NULL ," + // 67: time42
                "\"TIME43\" INTEGER NOT NULL ," + // 68: time43
                "\"TIME44\" INTEGER NOT NULL ," + // 69: time44
                "\"TIME45\" INTEGER NOT NULL ," + // 70: time45
                "\"TIME46\" INTEGER NOT NULL ," + // 71: time46
                "\"TIME47\" INTEGER NOT NULL ," + // 72: time47
                "\"TIME48\" INTEGER NOT NULL ," + // 73: time48
                "\"START_METHOD\" INTEGER NOT NULL ," + // 74: startMethod
                "\"ORDER_CODE\" BLOB);"); // 75: orderCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHARGER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChargerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getReserved1());
        stmt.bindLong(3, entity.getReserved2());
 
        byte[] chargerCode = entity.getChargerCode();
        if (chargerCode != null) {
            stmt.bindBlob(4, chargerCode);
        }
        stmt.bindLong(5, entity.getGunType());
        stmt.bindLong(6, entity.getGunPort());
 
        byte[] cardCode = entity.getCardCode();
        if (cardCode != null) {
            stmt.bindBlob(7, cardCode);
        }
        stmt.bindLong(8, entity.getBeginTime());
        stmt.bindLong(9, entity.getStopTime());
        stmt.bindLong(10, entity.getChargeTime());
        stmt.bindLong(11, entity.getStartSOC());
        stmt.bindLong(12, entity.getStopSOC());
        stmt.bindLong(13, entity.getOverReason());
        stmt.bindLong(14, entity.getPower());
        stmt.bindLong(15, entity.getStartReading());
        stmt.bindLong(16, entity.getStopReading());
        stmt.bindLong(17, entity.getAmount());
        stmt.bindLong(18, entity.getReserved17());
        stmt.bindLong(19, entity.getCardOverage());
        stmt.bindLong(20, entity.getCardIndex());
        stmt.bindLong(21, entity.getRecord());
        stmt.bindLong(22, entity.getReserved21());
        stmt.bindLong(23, entity.getStrategy());
        stmt.bindLong(24, entity.getChargeParam());
 
        byte[] vinCode = entity.getVinCode();
        if (vinCode != null) {
            stmt.bindBlob(25, vinCode);
        }
        stmt.bindLong(26, entity.getNumberPlate());
        stmt.bindLong(27, entity.getTime1());
        stmt.bindLong(28, entity.getTime2());
        stmt.bindLong(29, entity.getTime3());
        stmt.bindLong(30, entity.getTime4());
        stmt.bindLong(31, entity.getTime5());
        stmt.bindLong(32, entity.getTime6());
        stmt.bindLong(33, entity.getTime7());
        stmt.bindLong(34, entity.getTime8());
        stmt.bindLong(35, entity.getTime9());
        stmt.bindLong(36, entity.getTime10());
        stmt.bindLong(37, entity.getTime11());
        stmt.bindLong(38, entity.getTime12());
        stmt.bindLong(39, entity.getTime13());
        stmt.bindLong(40, entity.getTime14());
        stmt.bindLong(41, entity.getTime15());
        stmt.bindLong(42, entity.getTime16());
        stmt.bindLong(43, entity.getTime17());
        stmt.bindLong(44, entity.getTime18());
        stmt.bindLong(45, entity.getTime19());
        stmt.bindLong(46, entity.getTime20());
        stmt.bindLong(47, entity.getTime21());
        stmt.bindLong(48, entity.getTime22());
        stmt.bindLong(49, entity.getTime23());
        stmt.bindLong(50, entity.getTime24());
        stmt.bindLong(51, entity.getTime25());
        stmt.bindLong(52, entity.getTime26());
        stmt.bindLong(53, entity.getTime27());
        stmt.bindLong(54, entity.getTime28());
        stmt.bindLong(55, entity.getTime29());
        stmt.bindLong(56, entity.getTime30());
        stmt.bindLong(57, entity.getTime31());
        stmt.bindLong(58, entity.getTime32());
        stmt.bindLong(59, entity.getTime33());
        stmt.bindLong(60, entity.getTime34());
        stmt.bindLong(61, entity.getTime35());
        stmt.bindLong(62, entity.getTime36());
        stmt.bindLong(63, entity.getTime37());
        stmt.bindLong(64, entity.getTime38());
        stmt.bindLong(65, entity.getTime39());
        stmt.bindLong(66, entity.getTime40());
        stmt.bindLong(67, entity.getTime41());
        stmt.bindLong(68, entity.getTime42());
        stmt.bindLong(69, entity.getTime43());
        stmt.bindLong(70, entity.getTime44());
        stmt.bindLong(71, entity.getTime45());
        stmt.bindLong(72, entity.getTime46());
        stmt.bindLong(73, entity.getTime47());
        stmt.bindLong(74, entity.getTime48());
        stmt.bindLong(75, entity.getStartMethod());
 
        byte[] orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindBlob(76, orderCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChargerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getReserved1());
        stmt.bindLong(3, entity.getReserved2());
 
        byte[] chargerCode = entity.getChargerCode();
        if (chargerCode != null) {
            stmt.bindBlob(4, chargerCode);
        }
        stmt.bindLong(5, entity.getGunType());
        stmt.bindLong(6, entity.getGunPort());
 
        byte[] cardCode = entity.getCardCode();
        if (cardCode != null) {
            stmt.bindBlob(7, cardCode);
        }
        stmt.bindLong(8, entity.getBeginTime());
        stmt.bindLong(9, entity.getStopTime());
        stmt.bindLong(10, entity.getChargeTime());
        stmt.bindLong(11, entity.getStartSOC());
        stmt.bindLong(12, entity.getStopSOC());
        stmt.bindLong(13, entity.getOverReason());
        stmt.bindLong(14, entity.getPower());
        stmt.bindLong(15, entity.getStartReading());
        stmt.bindLong(16, entity.getStopReading());
        stmt.bindLong(17, entity.getAmount());
        stmt.bindLong(18, entity.getReserved17());
        stmt.bindLong(19, entity.getCardOverage());
        stmt.bindLong(20, entity.getCardIndex());
        stmt.bindLong(21, entity.getRecord());
        stmt.bindLong(22, entity.getReserved21());
        stmt.bindLong(23, entity.getStrategy());
        stmt.bindLong(24, entity.getChargeParam());
 
        byte[] vinCode = entity.getVinCode();
        if (vinCode != null) {
            stmt.bindBlob(25, vinCode);
        }
        stmt.bindLong(26, entity.getNumberPlate());
        stmt.bindLong(27, entity.getTime1());
        stmt.bindLong(28, entity.getTime2());
        stmt.bindLong(29, entity.getTime3());
        stmt.bindLong(30, entity.getTime4());
        stmt.bindLong(31, entity.getTime5());
        stmt.bindLong(32, entity.getTime6());
        stmt.bindLong(33, entity.getTime7());
        stmt.bindLong(34, entity.getTime8());
        stmt.bindLong(35, entity.getTime9());
        stmt.bindLong(36, entity.getTime10());
        stmt.bindLong(37, entity.getTime11());
        stmt.bindLong(38, entity.getTime12());
        stmt.bindLong(39, entity.getTime13());
        stmt.bindLong(40, entity.getTime14());
        stmt.bindLong(41, entity.getTime15());
        stmt.bindLong(42, entity.getTime16());
        stmt.bindLong(43, entity.getTime17());
        stmt.bindLong(44, entity.getTime18());
        stmt.bindLong(45, entity.getTime19());
        stmt.bindLong(46, entity.getTime20());
        stmt.bindLong(47, entity.getTime21());
        stmt.bindLong(48, entity.getTime22());
        stmt.bindLong(49, entity.getTime23());
        stmt.bindLong(50, entity.getTime24());
        stmt.bindLong(51, entity.getTime25());
        stmt.bindLong(52, entity.getTime26());
        stmt.bindLong(53, entity.getTime27());
        stmt.bindLong(54, entity.getTime28());
        stmt.bindLong(55, entity.getTime29());
        stmt.bindLong(56, entity.getTime30());
        stmt.bindLong(57, entity.getTime31());
        stmt.bindLong(58, entity.getTime32());
        stmt.bindLong(59, entity.getTime33());
        stmt.bindLong(60, entity.getTime34());
        stmt.bindLong(61, entity.getTime35());
        stmt.bindLong(62, entity.getTime36());
        stmt.bindLong(63, entity.getTime37());
        stmt.bindLong(64, entity.getTime38());
        stmt.bindLong(65, entity.getTime39());
        stmt.bindLong(66, entity.getTime40());
        stmt.bindLong(67, entity.getTime41());
        stmt.bindLong(68, entity.getTime42());
        stmt.bindLong(69, entity.getTime43());
        stmt.bindLong(70, entity.getTime44());
        stmt.bindLong(71, entity.getTime45());
        stmt.bindLong(72, entity.getTime46());
        stmt.bindLong(73, entity.getTime47());
        stmt.bindLong(74, entity.getTime48());
        stmt.bindLong(75, entity.getStartMethod());
 
        byte[] orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindBlob(76, orderCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChargerBean readEntity(Cursor cursor, int offset) {
        ChargerBean entity = new ChargerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1), // reserved1
            cursor.getShort(offset + 2), // reserved2
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // chargerCode
            (byte) cursor.getShort(offset + 4), // gunType
            (byte) cursor.getShort(offset + 5), // gunPort
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // cardCode
            cursor.getLong(offset + 7), // beginTime
            cursor.getLong(offset + 8), // stopTime
            cursor.getInt(offset + 9), // chargeTime
            (byte) cursor.getShort(offset + 10), // startSOC
            (byte) cursor.getShort(offset + 11), // stopSOC
            cursor.getInt(offset + 12), // overReason
            cursor.getInt(offset + 13), // power
            cursor.getInt(offset + 14), // startReading
            cursor.getInt(offset + 15), // stopReading
            cursor.getInt(offset + 16), // amount
            cursor.getInt(offset + 17), // reserved17
            cursor.getInt(offset + 18), // cardOverage
            cursor.getInt(offset + 19), // cardIndex
            cursor.getInt(offset + 20), // record
            (byte) cursor.getShort(offset + 21), // reserved21
            (byte) cursor.getShort(offset + 22), // strategy
            cursor.getInt(offset + 23), // chargeParam
            cursor.isNull(offset + 24) ? null : cursor.getBlob(offset + 24), // vinCode
            cursor.getLong(offset + 25), // numberPlate
            cursor.getShort(offset + 26), // time1
            cursor.getShort(offset + 27), // time2
            cursor.getShort(offset + 28), // time3
            cursor.getShort(offset + 29), // time4
            cursor.getShort(offset + 30), // time5
            cursor.getShort(offset + 31), // time6
            cursor.getShort(offset + 32), // time7
            cursor.getShort(offset + 33), // time8
            cursor.getShort(offset + 34), // time9
            cursor.getShort(offset + 35), // time10
            cursor.getShort(offset + 36), // time11
            cursor.getShort(offset + 37), // time12
            cursor.getShort(offset + 38), // time13
            cursor.getShort(offset + 39), // time14
            cursor.getShort(offset + 40), // time15
            cursor.getShort(offset + 41), // time16
            cursor.getShort(offset + 42), // time17
            cursor.getShort(offset + 43), // time18
            cursor.getShort(offset + 44), // time19
            cursor.getShort(offset + 45), // time20
            cursor.getShort(offset + 46), // time21
            cursor.getShort(offset + 47), // time22
            cursor.getShort(offset + 48), // time23
            cursor.getShort(offset + 49), // time24
            cursor.getShort(offset + 50), // time25
            cursor.getShort(offset + 51), // time26
            cursor.getShort(offset + 52), // time27
            cursor.getShort(offset + 53), // time28
            cursor.getShort(offset + 54), // time29
            cursor.getShort(offset + 55), // time30
            cursor.getShort(offset + 56), // time31
            cursor.getShort(offset + 57), // time32
            cursor.getShort(offset + 58), // time33
            cursor.getShort(offset + 59), // time34
            cursor.getShort(offset + 60), // time35
            cursor.getShort(offset + 61), // time36
            cursor.getShort(offset + 62), // time37
            cursor.getShort(offset + 63), // time38
            cursor.getShort(offset + 64), // time39
            cursor.getShort(offset + 65), // time40
            cursor.getShort(offset + 66), // time41
            cursor.getShort(offset + 67), // time42
            cursor.getShort(offset + 68), // time43
            cursor.getShort(offset + 69), // time44
            cursor.getShort(offset + 70), // time45
            cursor.getShort(offset + 71), // time46
            cursor.getShort(offset + 72), // time47
            cursor.getShort(offset + 73), // time48
            (byte) cursor.getShort(offset + 74), // startMethod
            cursor.isNull(offset + 75) ? null : cursor.getBlob(offset + 75) // orderCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChargerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReserved1(cursor.getShort(offset + 1));
        entity.setReserved2(cursor.getShort(offset + 2));
        entity.setChargerCode(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setGunType((byte) cursor.getShort(offset + 4));
        entity.setGunPort((byte) cursor.getShort(offset + 5));
        entity.setCardCode(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setBeginTime(cursor.getLong(offset + 7));
        entity.setStopTime(cursor.getLong(offset + 8));
        entity.setChargeTime(cursor.getInt(offset + 9));
        entity.setStartSOC((byte) cursor.getShort(offset + 10));
        entity.setStopSOC((byte) cursor.getShort(offset + 11));
        entity.setOverReason(cursor.getInt(offset + 12));
        entity.setPower(cursor.getInt(offset + 13));
        entity.setStartReading(cursor.getInt(offset + 14));
        entity.setStopReading(cursor.getInt(offset + 15));
        entity.setAmount(cursor.getInt(offset + 16));
        entity.setReserved17(cursor.getInt(offset + 17));
        entity.setCardOverage(cursor.getInt(offset + 18));
        entity.setCardIndex(cursor.getInt(offset + 19));
        entity.setRecord(cursor.getInt(offset + 20));
        entity.setReserved21((byte) cursor.getShort(offset + 21));
        entity.setStrategy((byte) cursor.getShort(offset + 22));
        entity.setChargeParam(cursor.getInt(offset + 23));
        entity.setVinCode(cursor.isNull(offset + 24) ? null : cursor.getBlob(offset + 24));
        entity.setNumberPlate(cursor.getLong(offset + 25));
        entity.setTime1(cursor.getShort(offset + 26));
        entity.setTime2(cursor.getShort(offset + 27));
        entity.setTime3(cursor.getShort(offset + 28));
        entity.setTime4(cursor.getShort(offset + 29));
        entity.setTime5(cursor.getShort(offset + 30));
        entity.setTime6(cursor.getShort(offset + 31));
        entity.setTime7(cursor.getShort(offset + 32));
        entity.setTime8(cursor.getShort(offset + 33));
        entity.setTime9(cursor.getShort(offset + 34));
        entity.setTime10(cursor.getShort(offset + 35));
        entity.setTime11(cursor.getShort(offset + 36));
        entity.setTime12(cursor.getShort(offset + 37));
        entity.setTime13(cursor.getShort(offset + 38));
        entity.setTime14(cursor.getShort(offset + 39));
        entity.setTime15(cursor.getShort(offset + 40));
        entity.setTime16(cursor.getShort(offset + 41));
        entity.setTime17(cursor.getShort(offset + 42));
        entity.setTime18(cursor.getShort(offset + 43));
        entity.setTime19(cursor.getShort(offset + 44));
        entity.setTime20(cursor.getShort(offset + 45));
        entity.setTime21(cursor.getShort(offset + 46));
        entity.setTime22(cursor.getShort(offset + 47));
        entity.setTime23(cursor.getShort(offset + 48));
        entity.setTime24(cursor.getShort(offset + 49));
        entity.setTime25(cursor.getShort(offset + 50));
        entity.setTime26(cursor.getShort(offset + 51));
        entity.setTime27(cursor.getShort(offset + 52));
        entity.setTime28(cursor.getShort(offset + 53));
        entity.setTime29(cursor.getShort(offset + 54));
        entity.setTime30(cursor.getShort(offset + 55));
        entity.setTime31(cursor.getShort(offset + 56));
        entity.setTime32(cursor.getShort(offset + 57));
        entity.setTime33(cursor.getShort(offset + 58));
        entity.setTime34(cursor.getShort(offset + 59));
        entity.setTime35(cursor.getShort(offset + 60));
        entity.setTime36(cursor.getShort(offset + 61));
        entity.setTime37(cursor.getShort(offset + 62));
        entity.setTime38(cursor.getShort(offset + 63));
        entity.setTime39(cursor.getShort(offset + 64));
        entity.setTime40(cursor.getShort(offset + 65));
        entity.setTime41(cursor.getShort(offset + 66));
        entity.setTime42(cursor.getShort(offset + 67));
        entity.setTime43(cursor.getShort(offset + 68));
        entity.setTime44(cursor.getShort(offset + 69));
        entity.setTime45(cursor.getShort(offset + 70));
        entity.setTime46(cursor.getShort(offset + 71));
        entity.setTime47(cursor.getShort(offset + 72));
        entity.setTime48(cursor.getShort(offset + 73));
        entity.setStartMethod((byte) cursor.getShort(offset + 74));
        entity.setOrderCode(cursor.isNull(offset + 75) ? null : cursor.getBlob(offset + 75));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChargerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChargerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChargerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
